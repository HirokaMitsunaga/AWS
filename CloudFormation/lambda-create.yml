AWSTemplateFormatVersion: 2010-09-09

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Common Configuration
        Parameters:
          - BucketName

Parameters:
  BucketName:
    Description: input  S3bucket for web site hosting
    Type: String

Resources:
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref BucketName
        S3Key: lambda/boto3-1.26.32.zip
      Description: "for python boto3 1.26.32"
      LayerName: boto3-1-26-32

  ChangeCloudFrontDefaultRootObjectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: lambda/change-cloudfront-default-root-object.zip
      FunctionName: !Sub ${AWS::StackName}-function
      Handler: change-cloudfront-default-root-object.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 10
      Layers: 
        - !Ref LambdaLayer
      Environment:
        Variables:
          DistributionId: !ImportValue CloudFrontID-20230102
        
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-function-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-function-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub "arn:aws:logs:ap-northeast-1:${AWS::AccountId}:*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
              - Resource: !Sub "arn:aws:logs:ap-northeast-1:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-function:*"
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: 
                 - !Join 
                  - ""
                  - - !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/
                    - !ImportValue CloudFrontID-20230102
                Effect: Allow
                Action:
                  - cloudfront:GetDistribution
                  - cloudfront:CreateInvalidation
                  - cloudfront:UpdateDistribution
              - Resource: !Sub "arn:aws:s3:::${BucketName}"
                Effect: Allow
                Action:
                  - s3:PutBucketNotification

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ChangeCloudFrontDefaultRootObjectLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
  
  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      Id: !Sub
        - S3LambdaNotif-${UniqueId}
        - UniqueId: !Select [0, !Split ['-', !Select [2, !Split [/, !Ref 'AWS::StackId']]]]
      Bucket: !Ref BucketName
      Prefix: ""
      Suffix: ".html"
      LambdaArn: !GetAtt ChangeCloudFrontDefaultRootObjectLambda.Arn

  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: s3-notification-lambda-function
      Handler: s3-notification-lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref BucketName
        S3Key: lambda/s3-notification-lambda.zip
      Runtime: python3.8
      Timeout: 50

  
  
