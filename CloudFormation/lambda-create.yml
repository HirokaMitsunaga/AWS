AWSTemplateFormatVersion: 2010-09-09

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: S3 Configuration
        Parameters:
          - BucketName
          - Prefix
          - Suffix

Parameters:
  BucketName:
    Description: S3 bucket that's used for the Lambda event notification
    Type: String
  Prefix:
    Type: String
    Description: Prefix of the object key name for filtering rules
  Suffix:
    Type: String
    Description: Suffix of the object key name for filtering rules
  

Resources:
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref BucketName
        S3Key: lambda/boto3-1.26.32.zip
      Description: "for python boto3 1.26.32"
      LayerName: boto3-1-26-32

  ChangeCloudFrontDefaultRootObjectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: lambda/change-cloudfront-default-root-object.zip
      FunctionName: !Sub ${AWS::StackName}-function
      Handler: change-cloudfront-default-root-object.lambda_handler
      Role: !GetAtt ChangeCloudFrontDefaultRootObjectLambdaRole.Arn
      Runtime: python3.9
      Timeout: 10
      Layers: 
        - !Ref LambdaLayer
      Environment:
        Variables:
          DistributionId: !ImportValue CloudFrontID-20230102
  
  ChangeCloudFrontDefaultRootObjectLambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: "ChangeCloudFrontDefaultRootObjectLambdaPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Resource: !Sub "arn:aws:logs:ap-northeast-1:${AWS::AccountId}:*"
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Resource: 
              - !Join 
               - ""
               - - !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/
                 - !ImportValue CloudFrontID-20230102
            Effect: Allow
            Action:
              - cloudfront:GetDistribution
              - cloudfront:CreateInvalidation
              - cloudfront:UpdateDistribution

  ChangeCloudFrontDefaultRootObjectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "ChangeCloudFrontDefaultRootObjectLambdaRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ChangeCloudFrontDefaultRootObjectLambdaPolicy

  ChangeCloudFrontDefaultRootObjectLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ChangeCloudFrontDefaultRootObjectLambda}
      RetentionInDays: 14

  ChangeCloudFrontDefaultRootObjectLambdaMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "[ERROR]"
      LogGroupName: !Ref ChangeCloudFrontDefaultRootObjectLambdaLogGroup
      MetricTransformations:
        -
          MetricValue: 1
          DefaultValue: 0
          MetricNamespace: "ChangeCloudFrontDefaultRootObjectLambdaMetric"
          MetricName: "change-cloudfront-defaultrootobject-exception"
    DependsOn: ChangeCloudFrontDefaultRootObjectLambdaLogGroup

  ChangeCloudFrontDefaultRootObjectLambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Change CloudFront DefaultRootObject Exception Alarm"
      AlarmName: "change-cloudfront-defaultrootobject-alarm"
      AlarmActions:
        - "arn:aws:sns:ap-northeast-1:${AWS::AccountId}::event"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: "change-cloudfront-defaultrootobject-exception"
      Namespace: "ChangeCloudFrontDefaultRootObjectLambdaMetric"
      Period: 60
      Statistic: Sum
    DependsOn: ChangeCloudFrontDefaultRootObjectLambdaMetricFilter

  S3NotificationLambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: "S3NotificationLambdaPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Resource: !Sub "arn:aws:logs:ap-northeast-1:${AWS::AccountId}:*"
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Resource: !Sub "arn:aws:s3:::${BucketName}"
            Effect: Allow
            Action:
              - s3:PutBucketNotification
              - s3:GetBucketNotification

  S3NotificationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "S3NotificationLambdaRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref S3NotificationLambdaPolicy

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ChangeCloudFrontDefaultRootObjectLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
  
  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt S3NotificationLambda.Arn
      Id: !Sub
        - S3NotificationLambda-${UniqueId}
        - UniqueId: !Select [0, !Split ['-', !Select [2, !Split [/, !Ref 'AWS::StackId']]]]
      Bucket: !Ref BucketName
      Prefix: !Ref Prefix
      Suffix: !Ref Suffix
      LambdaArn: !GetAtt ChangeCloudFrontDefaultRootObjectLambda.Arn

  S3NotificationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${AWS::StackName}-s3-notification-lambda-function
      Handler: index.lambda_handler
      Role: !GetAtt S3NotificationLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          print('Loading function')
          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      Id=event['ResourceProperties']['Id']
                      Bucket=event['ResourceProperties']['Bucket']

                      delete_notification(Id, Bucket)
                      print("Sending response to custom resource after Delete")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print("Request Type:",event['RequestType'])
                      Id=event['ResourceProperties']['Id']
                      Prefix=event['ResourceProperties']['Prefix']
                      Suffix=event['ResourceProperties']['Suffix']
                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']
                      
                      add_notification(Id, Prefix, Suffix, LambdaArn, Bucket)
                      responseData={'Bucket':Bucket}
                      print("Sending response to custom resource")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILED'
                  responseData = {'Failure': 'Something bad happened.'}
              cfnresponse.send(event, context, responseStatus, responseData)

          def add_notification(Id, Prefix, Suffix, LambdaArn, Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              print(bucket_notification.lambda_function_configurations)

              lambda_function_configurations = bucket_notification.lambda_function_configurations

              if lambda_function_configurations is None:
                  lambda_function_configurations = []
              else:
                  lambda_function_configurations = [e for e in lambda_function_configurations if e['Id'] != Id]

              lambda_config = {}
              lambda_config['Id'] = Id
              lambda_config['LambdaFunctionArn'] = LambdaArn
              lambda_config['Events'] = ['s3:ObjectCreated:Put']
              lambda_config['Filter'] = {'Key': {'FilterRules': [
                      {'Name': 'Prefix', 'Value': Prefix},
                      {'Name': 'Suffix', 'Value': Suffix}
                      ]}
              }
              
              lambda_function_configurations.append(lambda_config)
              print(lambda_function_configurations)
              
              put_bucket_notification(bucket_notification, lambda_function_configurations)
              
              print("Put request completed....")
            
          def delete_notification(Id, Bucket):

              bucket_notification = s3.BucketNotification(Bucket)
              print(bucket_notification.lambda_function_configurations)

              lambda_function_configurations = bucket_notification.lambda_function_configurations

              if lambda_function_configurations is not None:
                  lambda_function_configurations = [e for e in lambda_function_configurations if e['Id'] != Id]

              print(lambda_function_configurations)

              put_bucket_notification(bucket_notification, lambda_function_configurations)

              print("Delete request completed....")

          def put_bucket_notification(BucketNotification, LambdaFunctionConfigurations):

              notification_configuration = {}
              if LambdaFunctionConfigurations is not None:
                  notification_configuration['LambdaFunctionConfigurations'] = LambdaFunctionConfigurations
              
              if BucketNotification.queue_configurations is not None:
                  notification_configuration['QueueConfigurations'] = BucketNotification.queue_configurations

              if BucketNotification.topic_configurations is not None:
                  notification_configuration['TopicConfigurations'] = BucketNotification.topic_configurations

              print(notification_configuration)
              
              response = BucketNotification.put(
                NotificationConfiguration= notification_configuration
              )
      Runtime: python3.9
      Timeout: 50

  
  
